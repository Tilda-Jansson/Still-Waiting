local speed = 100
local move_delay = 1 -- Time in seconds before next move allowed
local next_move_time = 0 -- When the next move is allowed
local window_width = 1200 
local window_height = 800 
local logo_width = 2329*0.125 -- Width of sprite
local logo_height = 1024*0.125 -- Height of sprite
local next_dir_change_time = 0 
local valid_keypresses = 0
local corner_hits = 0
local corner_tolerance = 4
local corner_hit_registered = false
local wall_bounce_detected = false

function init(self)
	math.randomseed(os.time())
	print("Script attached and running")
	msg.post(".", "acquire_input_focus") -- To receive input messages

	-- Calculate valid starting ranges
	local startXMin = logo_width / 2
	local startXMax = window_width - (logo_width / 2)
	local startYMin = logo_height / 2
	local startYMax = window_height - (logo_height / 2)

	-- Generate random starting position
	local startX = math.random(startXMin, startXMax)
	local startY = math.random(startYMin, startYMax)

	self.position = vmath.vector3(startX, startY, 0)
	go.set_position(self.position)

	-- Randomize initial direction
	local directionX = math.random(0, 1) * 2 - 1 -- will generate either -1 or 1
	local directionY = math.random(0, 1) * 2 - 1 -- will generate either -1 or 1
	self.direction = vmath.vector3(directionX, directionY, 0)
end

function final(self)
	msg.post(".", "release_input_input")
end

local function increment_corner_hits()
	corner_hits = corner_hits + 1
	if html5 then
		html5.run("updateCornerHits(" .. tostring(corner_hits) .. ");")
	end
end


local function playBounceSound()
	sound.play("#wall")  
end

local function playWinSound()
	sound.play("#win") 
end

function update(self, dt)
	local new_position = self.position + self.direction * speed * dt

	-- Left Wall Hit
	if new_position.x - (logo_width / 2) <= 0 then
		self.direction.x = -self.direction.x
		change_color()
		wall_bounce_detected = true
		print("Bounce off left wall")
		-- Adjust position to prevent sticking to the wall
		new_position.x = logo_width / 2
	end

	-- Right Wall Hit
	if new_position.x + (logo_width / 2) >= window_width then
		self.direction.x = -self.direction.x 
		change_color()
		wall_bounce_detected = true
		print("Bounce off right wall")
		-- Prevent sticking to the wall
		new_position.x = window_width - (logo_width / 2)
	end

	-- Top Wall Hit
	if new_position.y + (logo_height / 2) >= window_height then
		self.direction.y = -self.direction.y 
		change_color()
		wall_bounce_detected = true
		print("Bounce off top wall")
		-- Prevent sticking to the wall
		new_position.y = window_height - (logo_height / 2)
	end

	-- Bottom Wall Hit
	if new_position.y - (logo_height / 2) <= 0 then
		self.direction.y = -self.direction.y 
		change_color()
		wall_bounce_detected = true
		print("Bounce off bottom wall")
		-- Prevent sticking to the wall
		new_position.y = logo_height / 2
	end

	-- Check for corner hits with tolerance
	local near_corner = false
	if (math.abs(new_position.x - (logo_width / 2)) <= corner_tolerance and math.abs(new_position.y - (logo_height / 2)) <= corner_tolerance) or -- Bottom left
		(math.abs(new_position.x - (window_width - (logo_width / 2))) <= corner_tolerance and math.abs(new_position.y - (logo_height / 2)) <= corner_tolerance) or -- Bottom right
		(math.abs(new_position.x - (logo_width / 2)) <= corner_tolerance and math.abs(new_position.y - (window_height - (logo_height / 2))) <= corner_tolerance) or -- Top left
		(math.abs(new_position.x - (window_width - (logo_width / 2))) <= corner_tolerance and math.abs(new_position.y - (window_height - (logo_height / 2))) <= corner_tolerance) then -- Top right
		near_corner = true
		print("NEAR!")
	end

	-- Check if a corner hit should be registered
	if near_corner and not corner_hit_registered then
		increment_corner_hits()
		corner_hit_registered = true
		print("Corner hit with tolerance!")
		playWinSound()
		print("Corner sound")
	elseif not near_corner and corner_hit_registered then
		-- Reset the flag if the logo moves away from the corner
		corner_hit_registered = false
	end

	if wall_bounce_detected and not corner_hit_registered then -- Only play bounce sound if it wasn't a corner hit
		playBounceSound()
		wall_bounce_detected = false
		print("Wall sound")
	end

	-- Apply the new position after adjusting for bounces
	self.position = new_position
	go.set_position(self.position)
end

local function increment_valid_keypresses()
	valid_keypresses = valid_keypresses + 1
	if html5 then
		html5.run("updateKeyPresses(" .. tostring(valid_keypresses) .. ");")
	end
end

function on_input(self, action_id, action)
	if action.pressed then
		local new_direction = vmath.vector3(self.direction.x, self.direction.y, 0)
		if action_id == hash("move_left") then
			new_direction.x = -1
		elseif action_id == hash("move_right") then
			new_direction.x = 1
		end
		if action_id == hash("move_up") then
			new_direction.y = 1
		elseif action_id == hash("move_down") then
			new_direction.y = -1
		end

		-- Check if the new direction is diagonally different from the current direction and if the move delay has passed
		if os.clock() >= next_dir_change_time and (new_direction.x ~= self.direction.x or new_direction.y ~= self.direction.y) then
			-- Update direction only if it's a valid diagonal move and different from the current direction
			if new_direction.x ~= 0 and new_direction.y ~= 0 then
				self.direction = new_direction
				next_dir_change_time = os.clock() + move_delay -- Reset the delay timer for the next valid input
				print("Direction changed")

				increment_valid_keypresses()
			end
		end
	end
end


function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end



function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end


function change_color()
	-- Randomly change the sprite's color
	local new_color = vmath.vector4(math.random(), math.random(), math.random(), 1)
	go.set("#logo2Sprite", "tint", new_color) 
end

